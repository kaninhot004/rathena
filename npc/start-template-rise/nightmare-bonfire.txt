moc_akhet,199,248,5	script	กองไฟฝันร้าย	10252,{
	// Still warping
	if(isWarping)
	{
		end;
	}
	// Filling up Sleeping Pill
	FillUpSleepyPill();
	// Only party leader
	if(!is_party_leader())
	{
		mes "ท่านต้องเป็นหัวหน้า Party..";
		close;
	}
	// Cooldowning
	if(dreamCd > gettimetick(2))
	{
		mes "โปรดรอ " + (dreamCd - gettimetick(2)) + " วินาที..";
		close;
	}
	.@selectedMode = select("ฝันร้ายเรื่องเดียว:ฝันร้ายหลายเรื่อง:ฝันร้ายในฝันร้าย");
	isSingleNightmare = (.@selectedMode == 1);
	isNINightmare = (.@selectedMode == 3);
	if(isNINightmare)
	{
		.@nightmareIndexVar$ = "NINightmareIndex";
		.@hint$ = "ในฝันร้าย";
	}
	else if(isSingleNightmare)
	{
		.@nightmareIndexVar$ = "singleNightmareIndex";
		.@hint$ = "เรื่องเดียว";
	}
	else
	{
		.@nightmareIndexVar$ = "nightmareIndex";
		.@hint$ = "หลายเรื่อง";
	}
	// Clear 0 player in busy map
	freeloop(1);
	for(.@i = getarraysize($busyMap$) - 1; .@i >= 0; .@i--)
	{
		if(getmapusers($busyMap$[.@i]) <= 0)
		{
			deletearray $busyMap$[.@i],1;
		}
	}
	freeloop(0);
	// Setup
	.@partyId = getcharid(1);
	getpartymember .@partyId,1;
	getpartymember .@partyId,2;
	.@partySize = $@partymembercount;
	partySize = .@partySize;
	.@online = 0;
	.@playNightmareIndex = INT_MAX;
	freeloop(1);
	for(.@i = 0; .@i < .@partySize; .@i++)
	{
		if(!isloggedin($@partymemberaid[.@i],$@partymembercid[.@i]))
		{
			continue;
		}
		.@online++;
		if(!getvar(isSuitPicked,$@partymembercid[.@i]))
		{
			mes "มีสมาชิกใน Party ยังไม่ได้เลือกชุด..";
			close;
		}
		if(!getvar(isWishGranted,$@partymembercid[.@i]))
		{
			mes "มีสมาชิกใน Party ยังไม่เคยขอพร..";
			close;
		}
		.@nightmareIndex = getvar(getd(.@nightmareIndexVar$),$@partymembercid[.@i]);
		// Try to get lowest nightmare index
		if((.@nightmareIndex < .@playNightmareIndex) || (.@playNightmareIndex != playNightmareIndex))
		{
			.@playNightmareIndex = .@nightmareIndex;
			playNightmareIndex = .@nightmareIndex;
			isNightmareSetup = 0;
			nightmareBy$ = strcharinfo(0,$@partymembercid[.@i]);
		}
	}
	playNightmareIndex = cap_value(.@nightmareIndex,0,4);
	if(.@online <= 0)
	{
		mes "ไม่พบสมาชิกใน Party ที่ Online อยู่เลย..";
		close;
	}
	if(!isNINightmare)
	{
		bonusPenalty = 0;
	}
	// One time setup
	if(!isNightmareSetup)
	{
		// MvP Setup
		mvpRank = $mvpRank[playNightmareIndex];
		mvpType = $mvpIds[rand(getarraysize($mvpIds))];
		if(isNINightmare)
		{
			bonusPenalty = $bonusPenaltyPercent[playNightmareIndex];
		}
		isNightmareSetup = 1;
	}
	mAmount = $mvpAmount[playNightmareIndex];
	mes "จะทำการเข้าสู่ชั้นความฝัน (ร้าย" + .@hint$ + ") ที่ ^292fff" + playNightmareIndex + "^000000 ของ ^292fff" + nightmareBy$ + "^000000";
	mes "MvP จะ";
	mes " ^ff2929มี Rank " + mvpRank + "^000000";
	mes " ^ff2929Spawn " + mAmount + " ตัว^000000";
	if(isNINightmare)
	{
		mes "ผู้เล่น จะ";
		mes " ^ff2929โดนลด Bonus จากอุปกรณ์สวมใส่ " + bonusPenalty + "%^000000";
	}
	freeloop(0);
	next;
	menu "เข้าสู่ความฝัน (ร้าย" + .@hint$ + ")",-;
	if(!isSingleNightmare)
	{
		mvpType = 0;
	}
	freeloop(1);
	.@partyId = getcharid(1);
	getpartymember .@partyId,1;
	getpartymember .@partyId,2;
	.@partySize = $@partymembercount;
	if(.@partySize != partySize)
	{
		mes "สมาชิกใน Party มีการเปลี่ยนแปลง โปรดลองใหม่อีกครั้ง";
		close;
	}
	.@retry = 300;
	// Map Setup
	map$ = $maps$[rand(getarraysize($maps$))];
	while((inarray($busyMap$,map$) >= 0) && (.@retry > 0))
	{
		map$ = $maps$[rand(getarraysize($maps$))];
		.@retry--;
	}
	freeloop(0);
	if(.@retry <= 0)
	{
		mes "มีคนกำลังฝันอยู่เยอะเกินไป โปรดรอสักครู่..";
		close;
	}
	set(getd("$" + map$ + "MVP"),mvpType);
	set(getd("$" + map$ + "MVP_RANK"),mvpRank);
	set(getd("$" + map$ + "RemainingMonster"),mAmount);
	set(getd("$" + map$ + "Killed"),0);
	set(getd("$" + map$ + "Spawned"),0);
	set(getd("$" + map$ + "NIN"),isNINightmare);
	setarray $busyMap$[getarraysize($busyMap$)],map$;
	// Set variables to everyone
	.@partyId = getcharid(1);
	getpartymember .@partyId,1;
	getpartymember .@partyId,2;
	.@partySize = $@partymembercount;
	.@cd = gettimetick(2) + 60;
	for(.@i = 0; .@i < .@partySize; .@i++)
	{
		if(!isloggedin($@partymemberaid[.@i],$@partymembercid[.@i]))
		{
			continue;
		}
		set(dreamCd,.@cd,$@partymembercid[.@i]);
		set(isPartyLeader,0,$@partymembercid[.@i]);
		set(playNightmareIndex,playNightmareIndex,$@partymembercid[.@i]);
		set(mvpRank,mvpRank,$@partymembercid[.@i]);
		set(mvpType,mvpType,$@partymembercid[.@i]);
		set(isNightmareSetup,1,$@partymembercid[.@i]);
		set(bonusPenalty,bonusPenalty,$@partymembercid[.@i]);
	}
	isPartyLeader = 1;
	isWarping = 1;
	// Wait 0.001s to warp
	addtimer 1,strnpcinfo(0) + "::OnWarpToNightmare";
	// Wait 5s to spawn
	addtimer 5000,strnpcinfo(0) + "::OnSpawn";
	// Set penalty to everyone
	addrid(2,0,.@partyId);
	atcommand "@debuff 0 " + bonusPenalty;
	end;
	
OnWarpToNightmare:
	isWarping = 0;
	.@partyId = getcharid(1);
	getpartymember .@partyId,1;
	getpartymember .@partyId,2;
	.@partySize = $@partymembercount;
	if(.@partySize != partySize)
	{
		mes "สมาชิกใน Party มีการเปลี่ยนแปลง โปรดลองใหม่อีกครั้ง";
		close;
	}
	// Warp party
	warpparty map$,0,0,.@partyId;
	killmonsterall map$;
	end;
	
OnSpawn:
	if(!playerattached())
	{
		end;
	}
	.@mapName$ = strcharinfo(3);
	// Map checking
	if(IsSafeMap())
	{
		end;
	}
	// Party member amount checking
	.@partyId = getcharid(1);
	getpartymember .@partyId,1;
	getpartymember .@partyId,2;
	.@partySize = $@partymembercount;
	if(.@partySize != partySize)
	{
		// Remove from busy map
		.@busyMapIndex = inarray($busyMap$,.@mapName$);
		if(.@busyMapIndex != -1)
		{
			deletearray $busyMap$[.@busyMapIndex],1;
		}
		addrid(1);
		isPartyAmountChange = 1;
		// Warp map
		warp "Save",0,0;
		end;
	}
	// Spawn MvP
	freeloop(1);
	.@remainingMonster = getd("$" + .@mapName$ + "RemainingMonster");
	mapannounce .@mapName$,"เริ่ม ชั้นความฝัน (ร้าย) ที่ " + playNightmareIndex + " --- ศัตรูคงเหลือ " + .@remainingMonster + " ตัว",0;
	// Get Freecell
	getfreecell(.@mapName$,.@baseX,.@baseY);
	for(.@i = 0; .@i < .@remainingMonster; .@i++)
	{
		.@mvpId = getd("$" + .@mapName$ + "MVP");
		if(.@mvpId != 0)
		{
			.@monsterId = .@mvpId;
		}
		else
		{
			.@monsterId = $mvpIds[rand(getarraysize($mvpIds))];
		}
		getfreecell(.@mapName$,.@spawnX,.@spawnY,.@baseX,.@baseY,4,4);
		monster .@mapName$,.@spawnX,.@spawnY,"--ja--",.@monsterId,1,strnpcinfo(0) + "::OnMonsterDead";
		setunitdata $@mobid[0],UMOB_RANK,mvpRank;
		set(getd("$" + .@mapName$ + "Spawned"),getd("$" + .@mapName$ + "Spawned") + 1);
		// Limit to 100 per spawn
		if(.@i >= 99)
		{
			break;
		}
		// 40% Chance to get new spawn point 
		if(rand(100) < 40)
		{
			getfreecell(.@mapName$,.@baseX,.@baseY);
		}
	}
	freeloop(0);
	end;
	
OnMonsterDead:
	if(!playerattached())
	{
		end;
	}
	.@mapName$ = strcharinfo(3);
	if(IsSafeMap())
	{
		end;
	}
	if((getcharid(1) <= 0) && isPartyLeader)
	{
		// Remove monster
		killmonsterall .@mapName$;
		// Remove from busy map
		.@busyMapIndex = inarray($busyMap$,.@mapName$);
		if(.@busyMapIndex != -1)
		{
			deletearray $busyMap$[.@busyMapIndex],1;
		}
		addrid(1);
		isPartyLeaderLeaveParty = 1;
		// Warp map
		warp "Save",0,0;
		end;
	}
	set(getd("$" + .@mapName$ + "Killed"),getd("$" + .@mapName$ + "Killed") + 1);
	.@remainingMonster = getd("$" + .@mapName$ + "RemainingMonster") - getd("$" + .@mapName$ + "Killed");
	if(.@remainingMonster > 0)
	{
		mapannounce .@mapName$,"ศัตรูคงเหลือ " + .@remainingMonster + " ตัว",0;
		.@remainingMonsterToSpawn = getd("$" + .@mapName$ + "RemainingMonster") - getd("$" + .@mapName$ + "Spawned");
		if(.@remainingMonsterToSpawn > 0)
		{
			// Get Freecell
			getfreecell(.@mapName$,.@baseX,.@baseY);
			for(.@i = 0; .@i < .@remainingMonsterToSpawn; .@i++)
			{
				.@mvpId = getd("$" + .@mapName$ + "MVP");
				if(.@mvpId != 0)
				{
					.@monsterId = .@mvpId;
				}
				else
				{
					.@monsterId = $mvpIds[rand(getarraysize($mvpIds))];
				}
				getfreecell(.@mapName$,.@spawnX,.@spawnY,.@baseX,.@baseY,4,4);
				monster .@mapName$,.@spawnX,.@spawnY,"--ja--",.@monsterId,1,strnpcinfo(0) + "::OnMonsterDead";
				setunitdata $@mobid[0],UMOB_RANK,getd("$" + .@mapName$ + "MVP_RANK");
				set(getd("$" + .@mapName$ + "Spawned"),getd("$" + .@mapName$ + "Spawned") + 1);
				// 20% Chance to stop spawning more
				if(rand(100) < 20)
				{
					break;
				}
				// 40% Chance to get new spawn point 
				if(rand(100) < 40)
				{
					getfreecell(.@mapName$,.@baseX,.@baseY);
				}
			}
		}
	}
	else
	{
		if(getd("$" + .@mapName$ + "NIN"))
		{
			.@nightmareIndexVar$ = "NINightmareIndex";
			.@nightmareAnnounceVar$ = "isAnnounceInLobbyNIN";
		}
		else if(mvpType != 0)
		{
			.@nightmareIndexVar$ = "singleNightmareIndex";
			.@nightmareAnnounceVar$ = "isAnnounceInLobbySN";
		}
		else
		{
			.@nightmareIndexVar$ = "nightmareIndex";
			.@nightmareAnnounceVar$ = "isAnnounceInLobbyN";
		}
		killmonsterall .@mapName$;
		.@rewardNightmareIndex = cap_value(playNightmareIndex + 1,0,5);
		// Increase nightmare level to everyone (If possible)
		.@partyId = getcharid(1);
		getpartymember .@partyId,1;
		getpartymember .@partyId,2;
		.@partySize = $@partymembercount;
		for(.@i = 0; .@i < .@partySize; .@i++)
		{
			if(!isloggedin($@partymemberaid[.@i],$@partymembercid[.@i]))
			{
				continue;
			}
			if(strcharinfo(3,$@partymembercid[.@i]) != strcharinfo(3))
			{
				continue;
			}
			set(isNightmareSetup,0,$@partymembercid[.@i]);
			set(dreamCd,0,$@partymembercid[.@i]);
			if(getvar(getd(.@nightmareIndexVar$),$@partymembercid[.@i]) < .@rewardNightmareIndex)
			{
				set(isWishGenerated,0,$@partymembercid[.@i]);
				set(getd(.@nightmareIndexVar$),.@rewardNightmareIndex,$@partymembercid[.@i]);
				set(getd(.@nightmareAnnounceVar$),1,$@partymembercid[.@i]);
			}
		}
		// Remove from busy map
		.@busyMapIndex = inarray($busyMap$,.@mapName$);
		if(.@busyMapIndex != -1)
		{
			deletearray $busyMap$[.@busyMapIndex],1;
		}
		// Warp party
		warpparty $town$,0,0,.@partyId;
		end;
	}
	end;

OnInit:
	deletearray $busyMap$[0],getarraysize($busyMap$);
	waitingroom strnpcinfo(1),0;
	end;
}
